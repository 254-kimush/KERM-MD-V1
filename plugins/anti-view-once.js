/*
_  ______   _____ _____ _____ _   _
| |/ / ___| |_   _| ____/___ | | | |
| ' / |  _    | | |  _|| |   | |_| |
| . \ |_| |   | | | |__| |___|  _  |
|_|\_\____|   |_| |_____\____|_| |_|

ANYWAY, YOU MUST GIVE CREDIT TO MY CODE WHEN COPY IT
CONTACT ME HERE +237656520674
YT: KermHackTools
Github: Kgtech-cmr
*/

const axios = require('axios');
const config = require('../config');
const { cmd } = require('../command');

// Fonction utilitaire pour t√©l√©charger le m√©dia
async function downloadMedia(messageMedia, client) {
  if (typeof client.downloadAndSaveMediaMessage === 'function') {
    return client.downloadAndSaveMediaMessage(messageMedia);
  } else if (typeof client.downloadMediaMessage === 'function') {
    return client.downloadMediaMessage(messageMedia);
  } else {
    throw new Error("Aucune fonction de t√©l√©chargement de m√©dia n'est disponible sur le client.");
  }
}

cmd({
  'pattern': 'vv',
  'react': 'üì≤',
  'alias': ['retrive', 'viewonce'],
  'desc': "R√©cup√®re et renvoie le contenu d'un message ViewOnce (image/vid√©o/audio).",
  'category': 'misc',
  'use': "<query>",
  'filename': __filename
}, async (client, message, args, { from, reply }) => {
  try {
    console.log("Message re√ßu :", message);

    // V√©rifier si un message cit√© est pr√©sent
    const quotedMessage = message.msg?.contextInfo?.quotedMessage || message.quoted?.message;
    if (!quotedMessage) {
      return reply("‚ö†Ô∏è Veuillez r√©pondre √† un message *ViewOnce*.");
    }
    console.log("Message cit√© trouv√© :", quotedMessage);

    // V√©rifier que le message cit√© est bien un message ViewOnce
    const viewOnceContent = quotedMessage.viewOnceMessageV2 || quotedMessage.viewOnceMessage;
    if (!viewOnceContent || !viewOnceContent.message) {
      return reply("‚ö†Ô∏è Ce message n'est pas un message *ViewOnce*.");
    }
    console.log("Contenu ViewOnce trouv√© :", viewOnceContent);

    // Traitement selon le type de m√©dia
    if (viewOnceContent.message.imageMessage) {
      let caption = viewOnceContent.message.imageMessage.caption || "üì∑ Image ViewOnce";
      let mediaData = await downloadMedia(viewOnceContent.message.imageMessage, client);
      console.log("Image t√©l√©charg√©e");
      return client.sendMessage(from, {
        image: mediaData,
        caption: caption
      }, { quoted: message });
    }
    
    if (viewOnceContent.message.videoMessage) {
      let caption = viewOnceContent.message.videoMessage.caption || "üé• Vid√©o ViewOnce";
      let mediaData = await downloadMedia(viewOnceContent.message.videoMessage, client);
      console.log("Vid√©o t√©l√©charg√©e");
      return client.sendMessage(from, {
        video: mediaData,
        caption: caption
      }, { quoted: message });
    }
    
    if (viewOnceContent.message.audioMessage) {
      let mediaData = await downloadMedia(viewOnceContent.message.audioMessage, client);
      console.log("Audio t√©l√©charg√©");
      return client.sendMessage(from, {
        audio: mediaData
      }, { quoted: message });
    }
    
    return reply("‚ö†Ô∏è Ce type de message *ViewOnce* n'est pas support√©.");
    
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du message ViewOnce :", error);
    return reply(`‚ùå Une erreur est survenue lors de la r√©cup√©ration du message *ViewOnce* : ${error.message || error}`);
  }
});